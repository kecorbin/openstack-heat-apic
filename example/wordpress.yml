heat_template_version: 2013-05-23

description: >
  An example Heat Orchestration Template (HOT).
  WordPress is web software you can use to create a beautiful website
  or blog. This template installs two instances: one running a
  WordPress deployment and the other using a local MySQL database to
  store the data.

parameters:

  key_name:
    type: string
    description : Name of a KeyPair to enable SSH access to the instance
    default: kecorbin
  
  web_network:
    type: string
    default: web-net
    description: Web Network
  
  db_network:
    type: string
    default: db-net
    description: DB Network
 
  web_net_cidr:
    type: string
    default: 192.168.151.0/24
    description: Private network address (CIDR notation)

  db_net_cidr:
    type: string
    default: 192.168.152.0/24
    description: Private network address (CIDR notation)
 
  image_id:
    type: string
    description: >
      Name or ID of the image to use for the WordPress server.
      Recommended values are fedora-20.i386 or fedora-20.x86_64;
      get them from http://cloud.fedoraproject.org/fedora-20.i386.qcow2
      or http://cloud.fedoraproject.org/fedora-20.x86_64.qcow2 .
    default: fedora-20.x86_64

  db_name:
    type: string
    description: WordPress database name
    default: wordpress
    constraints:
      - length: { min: 1, max: 64 }
        description: db_name must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_name must begin with a letter and contain only alphanumeric
          characters

  db_username:
    type: string
    description: The WordPress database admin account username
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 16 }
        description: db_username must be between 1 and 16 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_username must begin with a letter and contain only alphanumeric
          characters

  db_password:
    type: string
    description: The WordPress database admin account password
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_password must be between 1 and 41 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_password must contain only alphanumeric characters

  db_root_password:
    type: string
    description: Root password for MySQL
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_root_password must be between 1 and 41 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_root_password must contain only alphanumeric characters


resources:
  web_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: web_network }

  web_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: web_net }
      cidr: { get_param: web_net_cidr }
      dns_nameservers : ["192.168.2.32" , "171.70.168.183"]

  db_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: db_network }

  db_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: db_net }
      cidr: { get_param: db_net_cidr }
      dns_nameservers : ["192.168.2.32" , "171.70.168.183"]

  router:
    type: OS::Neutron::Router


  router_interface_db:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: db_subnet }

  router_interface_web:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: web_subnet }



  DatabaseServer:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
      - network:
          get_resource: db_net
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            echo proxy=http://proxy-rtp-1.cisco.com:80 >> /etc/yum.conf	
            yum check-update
            sleep 30
            yum -y install mariadb mariadb-server
            touch /var/log/mariadb/mariadb.log
            chown mysql.mysql /var/log/mariadb/mariadb.log
            systemctl start mariadb.service
            # Setup MySQL root password and create a user
            mysqladmin -u root password db_rootpassword
            cat << EOF | mysql -u root --password=db_rootpassword
            CREATE DATABASE db_name;
            GRANT ALL PRIVILEGES ON db_name.* TO "db_user"@"%"
            IDENTIFIED BY "db_password";
            FLUSH PRIVILEGES;
            EXIT
            EOF
          params:
            db_rootpassword: { get_param: db_root_password }
            db_name: { get_param: db_name }
            db_user: { get_param: db_username }
            db_password: { get_param: db_password }

  WebServer:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: m1.small
      key_name: { get_param: key_name }
      networks:
      - network:
          get_resource: web_net
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            echo proxy=http://proxy-rtp-1.cisco.com:80 >> /etc/yum.conf	
            yum check-update
            sleep 30
            yum -y install httpd wordpress
            sed -i "/Deny from All/d" /etc/httpd/conf.d/wordpress.conf
            sed -i "s/Require local/Require all granted/" /etc/httpd/conf.d/wordpress.conf
            sed -i s/database_name_here/db_name/ /etc/wordpress/wp-config.php
            sed -i s/username_here/db_user/      /etc/wordpress/wp-config.php
            sed -i s/password_here/db_password/  /etc/wordpress/wp-config.php
            sed -i s/localhost/db_ipaddr/        /etc/wordpress/wp-config.php
            setenforce 0 # Otherwise net traffic with DB is disabled
            systemctl start httpd.service
          params:
            db_rootpassword: { get_param: db_root_password }
            db_name: { get_param: db_name }
            db_user: { get_param: db_username }
            db_password: { get_param: db_password }
            db_ipaddr: { get_attr: [DatabaseServer, first_address] }

  web_service_net:
    type: OS::Heat::APIC
    depends_on: web_net
    properties:
      ToolkitMethod: ConsumeContract
      Project: demo
      Contract: services-net-contract
      Network: { get_param: web_network }

  db_service_net:
    type: OS::Heat::APIC
    depends_on: db_net
    properties:
      ToolkitMethod: ConsumeContract
      Project: demo
      Contract: services-net-contract
      Network: { get_param: db_network }

  web_internet:
    type: OS::Heat::APIC
    depends_on: web_net
    properties:
      ToolkitMethod: ConsumeContract
      Project: demo
      Contract: internet
      Network: { get_param: web_network }

  db_internet:
    type: OS::Heat::APIC
    depends_on: db_net
    properties:
      ToolkitMethod: ConsumeContract
      Project: demo
      Contract: internet
      Network: { get_param: db_network }
  ltm:
    type: OS::Heat::BigIP
    properties:
      partition: ServiceNet
      vs_port:  any
      pool_member: { get_attr: [ WebServer, first_address ] }


